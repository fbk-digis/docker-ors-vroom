version: '3'
networks:
  default:
    driver: bridge
services:
  ors:
    container_name: smartbin-ors
    ports: ["8080:8080"]
    image: smartbin-ors:latest
    build:
      context: ./ors/openrouteservice/
      #dockerfile: ./ors/openrouteservice/Dockerfile
      args:
          #APP_CONFIG: ../config.json
          #OSM_FILE: ../../data/povo.osm.gz
          JAVA_OPTS: -Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Xms1g -Xmx2g
          CATALINA_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9001 -Dcom.sun.management.jmxremote.rmi.port=9001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost
    volumes:
      - ./ors/config.json:/ors-core/openrouteservice/src/main/resources/app.config
      - ./data/povo.osm.gz:/ors-core/data/osm_file.pbf
      - ./graphs/:/ors-core/data/graphs
      - ./elevation_cache/:/ors-core/data/elevation_cache
      - ./logs/:/var/log/ors/
      - ./logs/:/usr/local/tomcat/logs
    restart: always

  vroom:
    container_name: smartbin-vroom
    image: smartbin-vroom:latest
    build:
      context: ./vroom/
    ports: ["3000:3000"]
    volumes:
     - ./vroom/config.js:/vroom-express/src/config.js
    restart: always
    depends_on:
      - ors

  test:
    container_name: smartbin-test
    image: smartbin-test:latest
    build:
      context: ./test/
    ports: ["8888:8888"]
    volumes:
      - "./test/jupyter_notebook_config.py:/home/jovyan/.jupyter/jupyter_notebook_config.py"
    restart: always
    depends_on:
      - ors
      - vroom
          
  #EXAMPLE OF PELIAS CONFIG
  # libpostal:
  #   image: pelias/libpostal-service
  #   container_name: pelias_libpostal
  #   user: "${DOCKER_USER}"
  #   restart: always
  #   ports: [ "4400:4400" ]
  # schema:
  #   image: pelias/schema:master
  #   container_name: pelias_schema
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  # api:
  #   image: pelias/api:master
  #   container_name: pelias_api
  #   user: "${DOCKER_USER}"
  #   restart: always
  #   environment: [ "PORT=4000" ]
  #   ports: [ "4000:4000" ]
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  # placeholder:
  #   image: pelias/placeholder:master
  #   container_name: pelias_placeholder
  #   user: "${DOCKER_USER}"
  #   restart: always
  #   environment: [ "PORT=4100" ]
  #   ports: [ "4100:4100" ]
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  #     - "./blacklist/:/data/blacklist"
  # whosonfirst:
  #   image: pelias/whosonfirst:master
  #   container_name: pelias_whosonfirst
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  #     - "./blacklist/:/data/blacklist"
  # openstreetmap:
  #   image: pelias/openstreetmap:master
  #   container_name: pelias_openstreetmap
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  #     - "./blacklist/:/data/blacklist"
  # openaddresses:
  #   image: pelias/openaddresses:master
  #   container_name: pelias_openaddresses
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  #     - "./blacklist/:/data/blacklist"
  # transit:
  #   image: pelias/transit:master
  #   container_name: pelias_transit
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  # geonames:
  #   image: pelias/geonames:master
  #   container_name: pelias_geonames
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  #     - "./blacklist/:/data/blacklist"
  # csv-importer:
  #   image: pelias/csv-importer:master
  #   container_name: pelias_csv_importer
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  #     - "./blacklist/:/data/blacklist"
  # polylines:
  #   image: pelias/polylines:master
  #   container_name: pelias_polylines
  #   user: "${DOCKER_USER}"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  # interpolation:
  #   image: pelias/interpolation:master
  #   container_name: pelias_interpolation
  #   user: "${DOCKER_USER}"
  #   restart: always
  #   environment: [ "PORT=4300" ]
  #   ports: [ "4300:4300" ]
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  # pip:
  #   image: pelias/pip-service:master
  #   container_name: pelias_pip-service
  #   user: "${DOCKER_USER}"
  #   restart: always
  #   environment: [ "PORT=4200" ]
  #   ports: [ "4200:4200" ]
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "${DATA_DIR}:/data"
  # elasticsearch:
  #   image: pelias/elasticsearch:5.6.12
  #   container_name: pelias_elasticsearch
  #   user: "${DOCKER_USER}"
  #   restart: always
  #   ports: [ "9200:9200", "9300:9300" ]
  #   volumes:
  #     - "${DATA_DIR}/elasticsearch:/usr/share/elasticsearch/data"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   cap_add: [ "IPC_LOCK" ]
  #   environment: [
  #       "http.cors.enabled=true",
  #       "http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358",
  #       "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization",
  #       "http.cors.allow-credentials=true"
  #     ]
  # fuzzy-tester:
  #   image: pelias/fuzzy-tester:master
  #   container_name: pelias_fuzzy_tester
  #   user: "${DOCKER_USER}"
  #   restart: "no"
  #   command: "--help"
  #   volumes:
  #     - "./pelias.json:/code/pelias.json"
  #     - "./test_cases:/code/pelias/fuzzy-tester/test_cases"
  # trentino-opendata:
  #   image: stefcud/pelias-importer-trentino-opendata:storo
  #   container_name: trentino_opendata
  #   user: "${DOCKER_USER}"
  #   #environment: [ "DATA_DIR=${DATA_DIR}" ]
  #   volumes:
  #     - "${DATA_DIR}:/data"
  #   #- "./download.conf:/code/download.conf"
  # trentino-opendata-test:
  #  image: nginx
  #  container_name: trentino_opendata_test
  #  ports: [ "80:80" ]
  #  volumes:
  #    - "./preview/index.html:/usr/share/nginx/html/index.html"
