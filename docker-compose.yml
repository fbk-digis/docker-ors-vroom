version: '3'

networks:
  default:
    driver: bridge

services:
  ors:
    container_name: smartbin-ors
    ports: ["8080:8080"]
    image: smartbin-ors:latest
    build:
      context: ./ors/openrouteservice/
      args:
          APP_CONFIG: ./docker/conf/config.json
          OSM_FILE: ./docker/data/povo.osm.gz
          #JAVA_OPTS: -Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Xms1g -Xmx2g
          #CATALINA_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9001 -Dcom.sun.management.jmxremote.rmi.port=9001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost
    environment:
      - BUILD_GRAPHS=False  # Forces the container to rebuild the graphs, e.g. when PBF is changed in app.config
      - JAVA_OPTS="-Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Xms1g -Xmx2g"
      - CATALINA_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9001 -Dcom.sun.management.jmxremote.rmi.port=9001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost"
    volumes:
      - ./ors/config.json:/ors-core/openrouteservice/target/classes/app.config
      - ./graphs.mezzocorona.restrictions/:/ors-core/data/graphs
      - ./elevation_cache/:/ors-core/data/elevation_cache/
      - ./data/mezzocorona_restrictions.osm.pbf:/ors-core/data/osm_file.pbf
      #
      ##povo
      #- ./graphs.povo/:/ors-core/data/graphs
      #- ./elevation_cache_lidar/:/ors-core/data/elevation_cache/
      #- ./data/povo_restrict.osm.pbf:/ors-core/data/osm_file.pbf

      - ./logs/:/var/log/ors/
      - ./logs/:/usr/local/tomcat/logs/
      #default config - ./ors/app.config.sample:/ors-core/openrouteservice/target/classes/app.config
      #default data - ./data/povo.osm.gz:/ors-core/data/osm_file.pbf
      #- ./data/trentino-alto-adige.osm.pbf:/ors-core/data/osm_file.pbf
    restart: always

  #ors-proxy is useful for logging requestes/resposes from vroom to ors 
  #  and allow use of custom restrictions value of profile vehicle
  ors-proxy:
    container_name: smartbin-ors-proxy
    image: smartbin-ors-proxy:latest
    build:
      context: ./ors-proxy/
    ports: ["9090:9090"]
    environment:
      - ORS_HOST=ors
      - ORS_PORT=8080
    volumes:
      - ./ors-proxy/config.js:/ors-proxy/config.js:ro
    #restart: always
    depends_on:
      - ors

  vroom: 
    container_name: smartbin-vroom
    image: smartbin-vroom:latest
    build:
      context: ./vroom/
      args:
        VROOM_RELEASE: v1.6.0
        VROOM_EXPRESS_RELEASE: v0.7.0
    ports: ["8081:8081"]
    volumes:
      - ./vroom/conf/:/conf
    restart: always
    depends_on:
      - ors

  ors-app:
    container_name: smartbin-ors-app
    image: smartbin-ors-app:latest
    build:
      context: ./ors-app/
    ports: ["8082:3035"]
    volumes:
      - ./ors-app/build:/ors-app/app/build
      - ./ors-app/Gruntfile.js:/ors-app/Gruntfile.js
    depends_on:
      - ors

  vroom-app:
    container_name: smartbin-vroom-app
    image: smartbin-vroom-app
    build:
      context: ./vroom-app/
    ports: ["8083:9966"]
    volumes:
      - ./vroom-app/config.js:/vroom-app/src/config/api.js
    depends_on:
      - vroom

  jupyter:
    container_name: smartbin-jupyter
    image: smartbin-jupyter:latest
    build:
      context: ./jupyter/
    ports: ["8084:8888"]
    volumes:
      - ./jupyter/jupyter_notebook_config.py:/home/jovyan/.jupyter/jupyter_notebook_config.py
      - ./jupyter/test.ipynb:/home/jovyan/test.ipynb
      - ./jupyter/test2.ipynb:/home/jovyan/test2.ipynb
      - ./jupyter/data:/home/jovyan/data
    #restart: always
    depends_on:
      - ors
      - vroom
    